// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


// ######## App #########

model User {
  id String @id @default(uuid())
  email String
  password String
  displayName String
}


// ######## Student #########

model Student {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  firstName String
  lastName String
  
  family Family? @relation(fields: [familyId], references: [id])
  familyId String?

  gradeLevel Int
  areaOfNeed AreaOfNeed[]
  notes String

  client Client[]
  eventStudents EventStudent[]
}

model AreaOfNeed {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
}


// ######## Events #########

model Event {
  eventType EventType

  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scheduledFor DateTime
  durationMinutes Int

  // Class Events
  classType ClassType?
  notes String?
  eventStudents EventStudent[]

  // Consultation Events
  parentName String?
  studentName String?
  referralSource ReferralSource?
}

enum EventType {
  CLASS
  CONSULTATION
}

enum ClassType {
  PRIVATE
  GROUP
}

enum ReferralSource {
  PHONE
  PERSON
  EMAIL
  ZOOM
  FACEBOOK
  OTHER
}

model EventStudent {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  eventId String

  student Student @relation(fields: [studentId], references: [id])
  studentId String

  cost Decimal
  cancelledAt DateTime?
}


// ######## Invoice #########

model Invoice {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Decimal @db.Money
  paidAmount Decimal @db.Money

  paid Boolean
  sent Boolean

  clients Client @relation(fields: [clientId], references: [id])
  clientId String
}


// ######## Client #########

model Client {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  email String?
  phone String?

  students Student[]

  invoice Invoice[]
}


// ######## Family #########

model Family {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
}