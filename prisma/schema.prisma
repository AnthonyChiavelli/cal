// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


// ######## App #########

model User {
  email String @id
  password String
  displayName String

  settings UserSettings?

  students Student[]
  areaOfNeeds AreaOfNeed[]
  events Event[]
  eventStudents EventStudent[]
  invoices Invoice[]
  families Family[]
  parents Parent[]
  actionRecords ActionRecord[]
  recurrenceGroups RecurrenceGroup[]
}

model UserSettings {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userEmail], references: [email])
  userEmail String @unique

  basePrice Decimal @db.Money

  showInlineDayCalendarInMobileView Boolean @default(true)
}


// ######## Student #########

model Student {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String
  
  firstName String
  lastName String
  
  family Family? @relation(fields: [familyId], references: [id])
  familyId String?

  gradeLevel Int
  areaOfNeed AreaOfNeed[]
  notes String

  eventStudents EventStudent[]
}

model AreaOfNeed {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String

  students Student[]
}


// ######## Events #########

model Event {
  eventType EventType

  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String

  scheduledFor DateTime
  durationMinutes Int

  // Class Events
  classType ClassType @default(PRIVATE)
  notes String?
  eventStudents EventStudent[]

  // Consultation Events
  parentName String?
  studentName String?
  referralSource ReferralSource?

  completed Boolean @default(false)

  cancelledAt DateTime?

  recurrenceGroup RecurrenceGroup? @relation(fields: [recurrenceGroupId], references: [id])
  recurrenceGroupId String?
}

enum EventType {
  CLASS
  CONSULTATION
}

enum ClassType {
  PRIVATE
  GROUP
}

enum ReferralSource {
  PHONE
  PERSON
  EMAIL
  ZOOM
  FACEBOOK
  OTHER
}

model EventStudent {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String

  event Event @relation(fields: [eventId], references: [id])
  eventId String

  student Student @relation(fields: [studentId], references: [id])
  studentId String

  cost Decimal
  cancelledAt DateTime?
}

model RecurrenceGroup {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String

  events Event[]
}
// ######## Invoice #########

model Invoice {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String

  amount Decimal @db.Money
  paidAmount Decimal @db.Money

  paid Boolean
  sent Boolean

  family Family @relation(fields: [familyId], references: [id])
  familyId String
}


// ######## Family #########

model Family {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String

  familyName String

  students Student[]
  parents Parent[]
  invoices Invoice[]

  notes String

  balance Decimal @db.Money
}

model Parent {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String

  firstName String
  lastName String

  phone String?
  email String?
  isPrimary Boolean

  family Family? @relation(fields: [familyId], references: [id])
  familyId String?
}


// ######## Action Records #########

model ActionRecord {
  id String @id @default(uuid())
  createdAt DateTime @default(now())

  owner User @relation(fields: [ownerId], references: [email])
  ownerId String

  actionType ActionType
  success Boolean @default(true)
  additionalData Json
}

enum ActionType {
  CREATE_STUDENT
  EDIT_STUDENT
  DELETE_STUDENT
  IMPORT_STUDENTS
  SCHEDULE_EVENT
  EDIT_EVENT
  DELETE_EVENT
  CANCEL_EVENT
  MARK_COMPLETE_EVENT
  CREATE_RECURRING_EVENT
}